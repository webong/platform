name: Test & Ship

on:
- push
- pull_request

env:
  MYSQL_ROOT_PASSWORD: root

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      COMPOSER_PROCESS_TIMEOUT: 0

    strategy:
      matrix:
        php_version:
          - 7.3

    steps:
    - uses: actions/checkout@v2

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php_version }}

    - name: Get Composer Cache Directory
      id: composer-cache
      run: |
        echo "::set-output name=dir::$(composer config cache-files-dir)"
    - uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Setup environment
      run: |
        set -e;

        cp .env.testing .env ;
        . .env ;
        . docker/common.sh ;
        wait_for_mysql ;

        cat > $HOME/.my.cnf <<EOF
        [client]
        host=${DB_HOST}
        port=${DB_PORT}
        database=mysql
        user=root
        password=${MYSQL_ROOT_PASSWORD}
        EOF

        mysql -e "SELECT version();" ;
        mysql -e "SET GLOBAL sql_mode = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'" ;

        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
        php composer-setup.php
        php -r "unlink('composer-setup.php');"
        php composer.phar --version
        php composer.phar install --no-interaction ;


    - name: Check linting
      run: |
        set -e;

        php composer.phar lint

    - name: Run tests
      run: |
        set -e;

        php composer.phar pre-test;
        mysql -e 'SET @@GLOBAL.wait_timeout=1800';
        ( cd httpdocs/; php -S localhost:8000 -t . index.php &)
        php composer.phar test ;

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: ushahidi
          MYSQL_USER: ushahidi
          MYSQL_PASSWORD: ushahidi
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
        ports:
        - 3306:3306
        options: --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s --health-timeout 5s
          --health-retries 60

  ship:
    needs: [ test ]
    if: github.event_name == 'push'   # not on PRs
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Get ECR password
      id: get-ecr-password
      run: echo "::set-output name=password::$(aws ecr get-login-password)"

    - name: Build and push to Amazon ECR
      uses: docker/build-push-action@v1
      with:
        registry: 513259414768.dkr.ecr.eu-west-1.amazonaws.com
        repository: platform
        username: AWS
        password: ${{ steps.get-ecr-password.outputs.password }}
        always_pull: true
        tag_with_sha: true
        tag_with_ref: true

    - name: Logout from Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
